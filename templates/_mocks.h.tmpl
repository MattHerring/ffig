#include "{{class.name}}.h"
#include <exception>
#include <eggs/variant.hpp>
#include <functional>
{% load capi_filter %}
namespace mocks {

struct Mock{{class.name}} : {{class.name}}
{
  enum state
  {
    value,
    function
  };

  struct MockMethodResultNotSpecified : std::logic_error
  {
    using std::logic_error::logic_error ;
  };

  struct MockMethodResult
  {
    template <typename Value, typename ...Args>
    auto operator()(const char* method_name, const Value& v, Args&& ...args) const
    {
      switch(v.which())
      {
        case(value):
          return eggs::variants::get<value>(v);
        case(function):
          return eggs::variants::get<function>(v)(std::forward<Args>(args)...);
        default:
          throw MockMethodResultNotSpecified(method_name);
      }
    }
  };
{% for method in class.methods %}
  eggs::variant<{{method.return_type}}, std::function<{{method.return_type}}({% for arg in method.arguments %}{% if not forloop.first %},{% endif %}{{arg.type}}{% endfor %})>> {{method.name}}_;
{%endfor%}
{% for method in class.methods %}
  {{method.return_type}} {{method.name}}({% for arg in method.arguments %}{%if not forloop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %}) const override
  {
    return MockMethodResult()("{{method.name}}", {{method.name}}_{%for arg in method.arguments %}, {{arg.name}}{% endfor %});
  }
{%endfor%}
};
} // end namespace mocks
