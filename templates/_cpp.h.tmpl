#include <exception>
#include <string>
#include "{{class.name}}_c.h"
{% load capi_filter %}
namespace CPP_API {


class {{class.name}}
{
  {{class.name}}(const {{class.name}}&) = delete;

  {{class.name}}& operator = (const {{class.name}}&) = delete;

protected:
  const void* object_ = nullptr;
  {{class.name}}() = default;

public:
  class exception : public std::runtime_error
  {
  public:
    exception() : std::runtime_error({{class.name}}_error())
    {
      {{class.name}}_clear_error();
    }
  };

  virtual ~{{class.name}}()
  {
    {{class.name}}_dispose(object_);
  }
{% for method in class.methods %}
  {{method.return_type|to_c}} {{method.name}}({% for arg in method.arguments %}{%if not forloop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %}) const
  {
    {{method.return_type|to_c}} rv;
    int rc = {{class.name}}_{{method.name}}(object_{% for arg in method.arguments %}, {{arg.name|c_object:arg.type}}{% endfor %}, &rv);
    if (rc == {{class.name}}_RC_SUCCESS) return rv;
    throw exception();
  }
{%endfor%}
};
{% for impl in impl_classes %}
class {{impl.name}} : public {{class.name}}
{
public:
  {% for method in impl.constructors %}{{impl.name}}({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %})
  {
    int rc = {{class.name}}_{{impl.name}}_create({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.name|c_object:arg.type}}{% endfor %}, &object_);
    if ( rc == {{class.name}}_RC_SUCCESS ) return;
    throw exception();
  }{% endfor %}
};
{% endfor %}
} // end namespace CPP_API
